name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  
env:
  DOCKER_IMAGE: ghcr.io/${{ github.repository_owner }}/iso20022-console-log
  DOCKER_TAG: ${{ github.sha }}

defaults:
  run:
    working-directory: ./

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'

      - name: Build with Maven
        run: mvn -B -ntp clean verify

      - name: Run tests
        run: mvn -B test

  build-and-push-docker:
    name: Build and Push Docker Image
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-railway:
    name: Deploy to Railway via API
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    steps:
      - name: Set environment variables for Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
          RAILWAY_SERVICE_ID: ${{ secrets.RAILWAY_SERVICE_ID }}
        run: |
          # Tableau des variables Ã  mettre Ã  jour
          declare -A RAILWAY_VARS
          RAILWAY_VARS[IMAGE]="${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}"
          RAILWAY_VARS[SPRING_DATASOURCE_URL]="${{ secrets.SPRING_DATASOURCE_URL }}"
          RAILWAY_VARS[SPRING_DATASOURCE_USERNAME]="${{ secrets.SPRING_DATASOURCE_USERNAME }}"
          RAILWAY_VARS[SPRING_DATASOURCE_PASSWORD]="${{ secrets.SPRING_DATASOURCE_PASSWORD }}"
          RAILWAY_VARS[SPRING_PROFILES_ACTIVE]="prod"

          # Mettre Ã  jour chaque variable via l'API GraphQL Railway
          for VAR_NAME in "${!RAILWAY_VARS[@]}"; do
            VAR_VALUE=${RAILWAY_VARS[$VAR_NAME]}
            echo "ðŸ”¹ Setting $VAR_NAME on Railway..."
            curl -s -X POST \
              -H "Authorization: Bearer $RAILWAY_TOKEN" \
              -H "Content-Type: application/json" \
              -d '{
                "query": "mutation($input: VariableInput!) { upsertVariable(input: $input) { id } }",
                "variables": {
                  "input": {
                    "environmentId": "'${{ secrets.RAILWAY_ENVIRONMENT_ID }}'",
                    "name": "'"$VAR_NAME"'",
                    "projectId": "'$RAILWAY_PROJECT_ID'",
                    "serviceId": "'$RAILWAY_SERVICE_ID'",
                    "value": "'"$VAR_VALUE"'"
                  }
                }
              }' \
              https://backboard.railway.app/graphql/v1
          done

      - name: Trigger Railway deployment
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          RAILWAY_SERVICE_ID: ${{ secrets.RAILWAY_SERVICE_ID }}
        run: |
          echo "ðŸ”¹ Triggering deployment on Railway..."
          curl -s -X POST \
            -H "Authorization: Bearer $RAILWAY_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"environmentId": "'${{ secrets.RAILWAY_ENVIRONMENT_ID }}'"}' \
            "https://backboard.railway.app/api/v1/services/$RAILWAY_SERVICE_ID/deployments"