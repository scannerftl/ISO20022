name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  DOCKER_IMAGE: ghcr.io/${{ github.repository_owner }}/iso20022-console-log
  DOCKER_TAG: ${{ github.sha }}

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'

      - name: Build with Maven
        run: mvn -B -ntp clean verify

      - name: Run tests
        run: mvn -B test

  build-and-push-docker:
    name: Build and Push Docker Image
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-railway:
    name: Deploy to Railway via API
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    steps:
      - name: Check required secrets
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
          RAILWAY_SERVICE_ID: ${{ secrets.RAILWAY_SERVICE_ID }}
          RAILWAY_ENVIRONMENT_ID: ${{ secrets.RAILWAY_ENVIRONMENT_ID }}
          SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
        run: |
          required_secrets=("RAILWAY_TOKEN" "RAILWAY_PROJECT_ID" "RAILWAY_SERVICE_ID" "RAILWAY_ENVIRONMENT_ID" "SPRING_DATASOURCE_URL" "SPRING_DATASOURCE_USERNAME" "SPRING_DATASOURCE_PASSWORD")
          for s in "${required_secrets[@]}"; do
            secret_value=$(eval echo \$$s)
            if [ -z "${secret_value}" ]; then
              echo "‚ùå Secret $s is missing"
              exit 1
            fi
          done

      - name: Update Railway environment variables
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
          RAILWAY_SERVICE_ID: ${{ secrets.RAILWAY_SERVICE_ID }}
          RAILWAY_ENVIRONMENT_ID: ${{ secrets.RAILWAY_ENVIRONMENT_ID }}
          DOCKER_IMAGE: ${{ env.DOCKER_IMAGE }}
          DOCKER_TAG: ${{ env.DOCKER_TAG }}
          SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
        run: |
          declare -A vars
          vars[IMAGE]="$DOCKER_IMAGE:$DOCKER_TAG"
          vars[SPRING_DATASOURCE_URL]="$SPRING_DATASOURCE_URL"
          vars[SPRING_DATASOURCE_USERNAME]="$SPRING_DATASOURCE_USERNAME"
          vars[SPRING_DATASOURCE_PASSWORD]="$SPRING_DATASOURCE_PASSWORD"

          for name in "${!vars[@]}"; do
            echo "üîπ Setting $name on Railway..."
            response=$(curl -s -w "%{http_code}" -o /tmp/railway_response.json -X POST \
              -H "Authorization: Bearer $RAILWAY_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{
                \"query\": \"mutation(\$input: VariableInput!) { upsertVariable(input: \$input) { id } }\",
                \"variables\": {
                  \"input\": {
                    \"environmentId\": \"$RAILWAY_ENVIRONMENT_ID\",
                    \"name\": \"$name\",
                    \"projectId\": \"$RAILWAY_PROJECT_ID\",
                    \"serviceId\": \"$RAILWAY_SERVICE_ID\",
                    \"value\": \"${vars[$name]}\"
                  }
                }
              }" \
              https://backboard.railway.app/graphql/v1)
            code=$(tail -n1 <<< "$response")
            if [ "$code" != "200" ]; then
              echo "‚ùå Failed to set $name (HTTP $code)"
              cat /tmp/railway_response.json
              exit 1
            fi
          done

      - name: Trigger Railway deployment
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          RAILWAY_SERVICE_ID: ${{ secrets.RAILWAY_SERVICE_ID }}
          RAILWAY_ENVIRONMENT_ID: ${{ secrets.RAILWAY_ENVIRONMENT_ID }}
        run: |
          echo "üîπ Triggering deployment on Railway..."
          http_code=$(curl -s -o /tmp/deploy_response.json -w "%{http_code}" -X POST \
            -H "Authorization: Bearer $RAILWAY_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"environmentId\": \"$RAILWAY_ENVIRONMENT_ID\"}" \
            "https://backboard.railway.app/api/v1/services/$RAILWAY_SERVICE_ID/deployments")
          if [ "$http_code" != "200" ]; then
            echo "‚ùå Deployment failed (HTTP $http_code)"
            cat /tmp/deploy_response.json
            exit 1
          fi
          echo "‚úÖ Deployment triggered successfully!"
